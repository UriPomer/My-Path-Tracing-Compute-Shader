#pragma kernel CSMain

#include "struct.hlsl"

RWTexture2D<float4> _Result;
float2 _Resolution;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
float3 _DirectionalLight;
float4 _DirectionalLightColor;

static const float PI = 3.14159265f;

float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

float2 _Pixel;
float _Seed;

float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f); // Fraction part
    _Seed += 1.0f;
    return result;
}

RayHit GenRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

RWStructuredBuffer<Sphere> _Spheres;

RayHit HitSphere(Sphere sphere, Ray r)
{
    float3 center = sphere.position;
    float radius = sphere.radius;
    
    float3 oc = r.origin - center;
    float a = dot(r.dir, r.dir);
    float b = dot(r.dir, oc);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - a * c;

    RayHit hit = GenRayHit();

    if (discriminant < 0)
    {
        return hit;
    }

    float sqrtDiscriminant = sqrt(discriminant);
    float t0 = (-b - sqrtDiscriminant) / a;
    float t1 = (-b + sqrtDiscriminant) / a;

    if (t0 > 0.0 && t0 < hit.distance)
    {
        hit.position = r.origin + t0 * r.dir;
        hit.normal = normalize(hit.position - center);
        hit.albedo = sphere.albedo;
        hit.specular = sphere.specular;
        hit.smoothness = sphere.smoothness;
        hit.emission = sphere.emission;
        hit.distance = t0;
    }
    else if (t1 > 0.0 && t1 < hit.distance)
    {
        hit.position = r.origin + t1 * r.dir;
        hit.normal = normalize(hit.position - center);
        hit.albedo = sphere.albedo;
        hit.specular = sphere.specular;
        hit.smoothness = sphere.smoothness;
        hit.emission = sphere.emission;
        hit.distance = t1;
    }

    return hit;
}

float3 RayAt(Ray r, float t)
{
    return r.origin + t * r.dir;
}

Ray GenRayByID(float2 pixelCoord)
{
    uint width, height;
    _Result.GetDimensions(width, height);

    float2 screenPos = (pixelCoord + 0.5f) / float2(width, height);
    float2 ndcPos = screenPos * 2.0f - 1.0f;  // NDC 坐标

    float4 clipPos = float4(ndcPos, 1.0f, 1.0f);
    float3 viewPos = mul(_CameraInverseProjection, clipPos).xyz;
    float3 worldDir = mul((float3x3)_CameraToWorld, normalize(viewPos));

    Ray ray;
    ray.origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    ray.dir = normalize(worldDir);
    ray.energy = float3(1.0f, 1.0f, 1.0f);

    return ray;
}


float3 SampleSkybox(Ray ray)
{
    float theta = acos(ray.dir.y) / -PI;
    float phi = atan2(ray.dir.x, - ray.dir.z) / - PI * 0.5f;
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
}


RayHit Trace(Ray r)
{
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    RayHit hit = GenRayHit();
    for(uint i = 0; i < numSpheres; i++)
    {
        Sphere sphere = _Spheres[uint(i)];
        RayHit tempHit = HitSphere(sphere, r);
        if(tempHit.distance > 0.0 && tempHit.distance < hit.distance)
        {
            hit = tempHit;
        }
    }
    return hit;
}

float SmoothnessToPhongAlpha(float s)
{
    return pow(1000.0f, s * s);
}

float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleReflectionDirectionSphere(float3 normal, float alpha)
{
    // Spherical coordinate to cartesian
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if(hit.distance < 1.#INF - 20.0f)
    {
        // Calculate chances of diffuse and specular reflection
        hit.albedo = min(1.0f - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);

        float roulette = rand();
        if(roulette < specChance)
        {
            // Specular reflection
            ray.origin = hit.position + hit.normal * 0.001f; // Offset the origin slightly to avoid self-intersection
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            float3 reflected = reflect(ray.dir, hit.normal);
            ray.dir = SampleReflectionDirectionSphere(reflected, alpha);
            
            ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.dir, (alpha + 2) / (alpha + 1));
        }
        else if(diffChance > 0 && roulette < specChance + diffChance)
        {
            // Diffuse reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.dir = SampleReflectionDirectionSphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / diffChance) * hit.albedo;
        }
        else
        {
            ray.energy = 0.0f;
        }

        return hit.emission;
    }
    else
    {
        ray.energy = 0.0f;
        return SampleSkybox(ray);
    }
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Ray r = GenRayByID(id.xy);
    _Pixel = id.xy;
    float3 result = float3(0.0f, 0.0f, 0.0f);
    for(int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(r);
        result += r.energy * Shade(r, hit);

        if (!any(r.energy))
        {
            break;
        }
    }
    _Result[id.xy] = float4(result, 1.0f);
}

